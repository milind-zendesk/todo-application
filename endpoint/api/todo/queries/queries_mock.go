// Code generated by MockGen. DO NOT EDIT.
// Source: queries.go

// Package queries is a generated GoMock package.
package queries

import (
	sql "database/sql"
	reflect "reflect"
	model "todo-application/model"

	gomock "github.com/golang/mock/gomock"
)

// QueriesMock is a mock of Queries interface.
type QueriesMock struct {
	ctrl     *gomock.Controller
	recorder *QueriesMockMockRecorder
}

// QueriesMockMockRecorder is the mock recorder for QueriesMock.
type QueriesMockMockRecorder struct {
	mock *QueriesMock
}

// NewQueriesMock creates a new mock instance.
func NewQueriesMock(ctrl *gomock.Controller) *QueriesMock {
	mock := &QueriesMock{ctrl: ctrl}
	mock.recorder = &QueriesMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QueriesMock) EXPECT() *QueriesMockMockRecorder {
	return m.recorder
}

// DeleteTodoData mocks base method.
func (m *QueriesMock) DeleteTodoData(con *sql.DB, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTodoData", con, id)
}

// DeleteTodoData indicates an expected call of DeleteTodoData.
func (mr *QueriesMockMockRecorder) DeleteTodoData(con, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoData", reflect.TypeOf((*QueriesMock)(nil).DeleteTodoData), con, id)
}

// GetAllTodosData mocks base method.
func (m *QueriesMock) GetAllTodosData(con *sql.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllTodosData", con)
}

// GetAllTodosData indicates an expected call of GetAllTodosData.
func (mr *QueriesMockMockRecorder) GetAllTodosData(con interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodosData", reflect.TypeOf((*QueriesMock)(nil).GetAllTodosData), con)
}

// GetTodoData mocks base method.
func (m *QueriesMock) GetTodoData(con *sql.DB, id int) []model.Todos {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoData", con, id)
	ret0, _ := ret[0].([]model.Todos)
	return ret0
}

// GetTodoData indicates an expected call of GetTodoData.
func (mr *QueriesMockMockRecorder) GetTodoData(con, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoData", reflect.TypeOf((*QueriesMock)(nil).GetTodoData), con, id)
}

// InsertTodoData mocks base method.
func (m *QueriesMock) InsertTodoData(con *sql.DB, data model.Todos) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTodoData", con, data)
}

// InsertTodoData indicates an expected call of InsertTodoData.
func (mr *QueriesMockMockRecorder) InsertTodoData(con, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTodoData", reflect.TypeOf((*QueriesMock)(nil).InsertTodoData), con, data)
}

// UpdateTodoData mocks base method.
func (m *QueriesMock) UpdateTodoData(con *sql.DB, id int, data model.Todos) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTodoData", con, id, data)
}

// UpdateTodoData indicates an expected call of UpdateTodoData.
func (mr *QueriesMockMockRecorder) UpdateTodoData(con, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoData", reflect.TypeOf((*QueriesMock)(nil).UpdateTodoData), con, id, data)
}
