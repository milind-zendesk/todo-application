// Code generated by MockGen. DO NOT EDIT.
// Source: todo-application/endpoint/api/todo/queries (interfaces: Queries)

// Package queries is a generated GoMock package.
package queries

import (
	reflect "reflect"
	model "todo-application/model"

	gomock "github.com/golang/mock/gomock"
)

// MockQueries is a mock of Queries interface.
type MockQueries struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesMockRecorder
}

// MockQueriesMockRecorder is the mock recorder for MockQueries.
type MockQueriesMockRecorder struct {
	mock *MockQueries
}

// NewMockQueries creates a new mock instance.
func NewMockQueries(ctrl *gomock.Controller) *MockQueries {
	mock := &MockQueries{ctrl: ctrl}
	mock.recorder = &MockQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueries) EXPECT() *MockQueriesMockRecorder {
	return m.recorder
}

// DeleteTodoData mocks base method.
func (m *MockQueries) DeleteTodoData(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoData indicates an expected call of DeleteTodoData.
func (mr *MockQueriesMockRecorder) DeleteTodoData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoData", reflect.TypeOf((*MockQueries)(nil).DeleteTodoData), arg0)
}

// GetAllTodosData mocks base method.
func (m *MockQueries) GetAllTodosData() ([]model.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodosData")
	ret0, _ := ret[0].([]model.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodosData indicates an expected call of GetAllTodosData.
func (mr *MockQueriesMockRecorder) GetAllTodosData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodosData", reflect.TypeOf((*MockQueries)(nil).GetAllTodosData))
}

// GetTodoData mocks base method.
func (m *MockQueries) GetTodoData(arg0 int) (model.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoData", arg0)
	ret0, _ := ret[0].(model.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoData indicates an expected call of GetTodoData.
func (mr *MockQueriesMockRecorder) GetTodoData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoData", reflect.TypeOf((*MockQueries)(nil).GetTodoData), arg0)
}

// InsertTodoData mocks base method.
func (m *MockQueries) InsertTodoData(arg0 model.Todos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTodoData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTodoData indicates an expected call of InsertTodoData.
func (mr *MockQueriesMockRecorder) InsertTodoData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTodoData", reflect.TypeOf((*MockQueries)(nil).InsertTodoData), arg0)
}

// UpdateTodoData mocks base method.
func (m *MockQueries) UpdateTodoData(arg0 int, arg1 model.Todos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoData indicates an expected call of UpdateTodoData.
func (mr *MockQueriesMockRecorder) UpdateTodoData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoData", reflect.TypeOf((*MockQueries)(nil).UpdateTodoData), arg0, arg1)
}
